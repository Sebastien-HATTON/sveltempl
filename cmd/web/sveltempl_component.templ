package web

import (
	"context"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"rogchap.com/v8go"
)

templ SvelTemplComponent(componentName string, iso *v8go.Isolate) {
	@svelTemplComponent(componentName, iso)
}

func svelTemplComponent(componentName string, iso *v8go.Isolate) templ.Component {
	htmlOutput, err := svelTemplRenderToString(componentName, iso)

	if err != nil {
		return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
			_, err := io.WriteString(w, "<p style='color: red'>"+err.Error()+"</p>")
			return err
		})
	}

	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, htmlOutput)
		return err
	})
}

func svelTemplRenderToString(componentName string, iso *v8go.Isolate) (string, error) {
	// Create a new Javascript context
	ctx := v8go.NewContext(iso)

	if componentName == "" {
		return "", fmt.Errorf("you must pass in a component name to render")
	}

	// Construct the file path using fmt.Sprintf for string interpolation
	cwd, err := os.Getwd()
	if err != nil {
		log.Fatalf("Failed to get current working directory: %v", err)
	}
	componentPath := filepath.Join(cwd, "svelte/dist-ssr-go", fmt.Sprintf("%s.js", componentName))

	// Read the JavaScript file from disk
	componentScript, err := os.ReadFile(componentPath)
	if err != nil {
		return "", fmt.Errorf("could not read JavaScript file %s", componentPath)
	}

	// Run the JS file which will load it into context
	_, err = ctx.RunScript(string(componentScript), componentPath)
	if err != nil {
		return "", fmt.Errorf("error executing JavaScript file %s", componentPath)
	}

	// Run the component render method
	componentOutput, err := ctx.RunScript(fmt.Sprintf("%s.render({server: true}).html", componentName), "output.js") // return a value in JavaScript back to Go
	if err != nil {
		return "", fmt.Errorf("error executing JavaScript function")
	}

	return componentOutput.String(), nil
}
